//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Acceso_Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PRUEBA_UNIGISEntities : DbContext
    {
        public PRUEBA_UNIGISEntities()
            : base("name=PRUEBA_UNIGISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<PuntoVenta> PuntoVentas { get; set; }
        public virtual DbSet<Zona> Zonas { get; set; }
    
        public virtual int AddPunto(Nullable<decimal> latitud, Nullable<decimal> longitud, string descripcion, Nullable<decimal> venta, Nullable<int> idZona)
        {
            var latitudParameter = latitud.HasValue ?
                new ObjectParameter("Latitud", latitud) :
                new ObjectParameter("Latitud", typeof(decimal));
    
            var longitudParameter = longitud.HasValue ?
                new ObjectParameter("Longitud", longitud) :
                new ObjectParameter("Longitud", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var ventaParameter = venta.HasValue ?
                new ObjectParameter("Venta", venta) :
                new ObjectParameter("Venta", typeof(decimal));
    
            var idZonaParameter = idZona.HasValue ?
                new ObjectParameter("IdZona", idZona) :
                new ObjectParameter("IdZona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPunto", latitudParameter, longitudParameter, descripcionParameter, ventaParameter, idZonaParameter);
        }
    
        public virtual int DeletePunto(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePunto", iDParameter);
        }
    
        public virtual ObjectResult<GetAllPunto_Result> GetAllPunto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPunto_Result>("GetAllPunto");
        }
    
        public virtual ObjectResult<GetAllZona_Result> GetAllZona()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllZona_Result>("GetAllZona");
        }
    
        public virtual ObjectResult<GetByPunto_Result> GetByPunto(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetByPunto_Result>("GetByPunto", iDParameter);
        }
    
        public virtual int UpdatePunto(Nullable<int> iD, Nullable<decimal> latitud, Nullable<decimal> longitud, string descripcion, Nullable<decimal> venta, Nullable<int> idZona)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var latitudParameter = latitud.HasValue ?
                new ObjectParameter("Latitud", latitud) :
                new ObjectParameter("Latitud", typeof(decimal));
    
            var longitudParameter = longitud.HasValue ?
                new ObjectParameter("Longitud", longitud) :
                new ObjectParameter("Longitud", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var ventaParameter = venta.HasValue ?
                new ObjectParameter("Venta", venta) :
                new ObjectParameter("Venta", typeof(decimal));
    
            var idZonaParameter = idZona.HasValue ?
                new ObjectParameter("IdZona", idZona) :
                new ObjectParameter("IdZona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePunto", iDParameter, latitudParameter, longitudParameter, descripcionParameter, ventaParameter, idZonaParameter);
        }
    
        public virtual ObjectResult<GetAllTotalVentas_Result> GetAllTotalVentas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTotalVentas_Result>("GetAllTotalVentas");
        }
    }
}
